// Code generated by girgen. DO NOT EDIT.

package spelling

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libspelling.h>
import "C"

// GType values.
var (
	GTypeProvider = coreglib.Type(C.spelling_provider_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeProvider, F: marshalProvider},
	})
}

type Provider struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Provider)(nil)
)

// Providerer describes types inherited from class Provider.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Providerer interface {
	coreglib.Objector
	baseProvider() *Provider
}

var _ Providerer = (*Provider)(nil)

func wrapProvider(obj *coreglib.Object) *Provider {
	return &Provider{
		Object: obj,
	}
}

func marshalProvider(p uintptr) (interface{}, error) {
	return wrapProvider(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *Provider) baseProvider() *Provider {
	return self
}

// BaseProvider returns the underlying base object.
func BaseProvider(obj Providerer) *Provider {
	return obj.baseProvider()
}

func (self *Provider) DefaultCode() string {
	var _arg0 *C.SpellingProvider // out
	var _cret *C.char             // in

	_arg0 = (*C.SpellingProvider)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_provider_get_default_code(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

func (self *Provider) DisplayName() string {
	var _arg0 *C.SpellingProvider // out
	var _cret *C.char             // in

	_arg0 = (*C.SpellingProvider)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_provider_get_display_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Language gets an Language for the requested language, or NULL if the language
// is not supported.
//
// The function takes the following parameters:
//
//   - language to load such as en_US.
//
// The function returns the following values:
//
//   - ret (optional) or NULL.
func (self *Provider) Language(language string) Languager {
	var _arg0 *C.SpellingProvider // out
	var _arg1 *C.char             // out
	var _cret *C.SpellingLanguage // in

	_arg0 = (*C.SpellingProvider)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(language)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.spelling_provider_get_language(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(language)

	var _ret Languager // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := coreglib.AssumeOwnership(objptr)
			casted := object.WalkCast(func(obj coreglib.Objector) bool {
				_, ok := obj.(Languager)
				return ok
			})
			rv, ok := casted.(Languager)
			if !ok {
				panic("no marshaler for " + object.TypeFromInstance().String() + " matching spelling.Languager")
			}
			_ret = rv
		}
	}

	return _ret
}

// SupportsLanguage checks of language is supported by the provider.
//
// The function takes the following parameters:
//
//   - language such as en_US.
//
// The function returns the following values:
//
//   - ok: TRUE if language is supported, otherwise FALSE.
func (self *Provider) SupportsLanguage(language string) bool {
	var _arg0 *C.SpellingProvider // out
	var _arg1 *C.char             // out
	var _cret C.gboolean          // in

	_arg0 = (*C.SpellingProvider)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(language)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.spelling_provider_supports_language(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(language)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ProviderGetDefault gets the default spell provider.
//
// The function returns the following values:
//
//   - provider: Provider.
func ProviderGetDefault() Providerer {
	var _cret *C.SpellingProvider // in

	_cret = C.spelling_provider_get_default()

	var _provider Providerer // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type spelling.Providerer is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(Providerer)
			return ok
		})
		rv, ok := casted.(Providerer)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching spelling.Providerer")
		}
		_provider = rv
	}

	return _provider
}
