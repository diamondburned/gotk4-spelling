// Code generated by girgen. DO NOT EDIT.

package spelling

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	"libdb.so/gotk4-sourceview/pkg/gtksource/v5"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libspelling.h>
import "C"

// GType values.
var (
	GTypeTextBufferAdapter = coreglib.Type(C.spelling_text_buffer_adapter_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTextBufferAdapter, F: marshalTextBufferAdapter},
	})
}

// TextBufferAdapterOverrides contains methods that are overridable.
type TextBufferAdapterOverrides struct {
}

func defaultTextBufferAdapterOverrides(v *TextBufferAdapter) TextBufferAdapterOverrides {
	return TextBufferAdapterOverrides{}
}

// TextBufferAdapter: SpellingTextBufferAdapter implements helpers to easily add
// spellchecking capabilities to a GtkSourceBuffer.
type TextBufferAdapter struct {
	_ [0]func() // equal guard
	*coreglib.Object

	gio.ActionGroup
}

var (
	_ coreglib.Objector = (*TextBufferAdapter)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*TextBufferAdapter, *TextBufferAdapterClass, TextBufferAdapterOverrides](
		GTypeTextBufferAdapter,
		initTextBufferAdapterClass,
		wrapTextBufferAdapter,
		defaultTextBufferAdapterOverrides,
	)
}

func initTextBufferAdapterClass(gclass unsafe.Pointer, overrides TextBufferAdapterOverrides, classInitFunc func(*TextBufferAdapterClass)) {
	if classInitFunc != nil {
		class := (*TextBufferAdapterClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTextBufferAdapter(obj *coreglib.Object) *TextBufferAdapter {
	return &TextBufferAdapter{
		Object: obj,
		ActionGroup: gio.ActionGroup{
			Object: obj,
		},
	}
}

func marshalTextBufferAdapter(p uintptr) (interface{}, error) {
	return wrapTextBufferAdapter(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewTextBufferAdapter: create a new SpellingTextBufferAdapter.
//
// The function takes the following parameters:
//
//   - buffer: GtkSourceBuffer.
//   - checker: SpellingChecker.
//
// The function returns the following values:
//
//   - textBufferAdapter: newly created SpellingTextBufferAdapter.
func NewTextBufferAdapter(buffer *gtksource.Buffer, checker *Checker) *TextBufferAdapter {
	var _arg1 *C.GtkSourceBuffer           // out
	var _arg2 *C.SpellingChecker           // out
	var _cret *C.SpellingTextBufferAdapter // in

	_arg1 = (*C.GtkSourceBuffer)(unsafe.Pointer(coreglib.InternObject(buffer).Native()))
	_arg2 = (*C.SpellingChecker)(unsafe.Pointer(coreglib.InternObject(checker).Native()))

	_cret = C.spelling_text_buffer_adapter_new(_arg1, _arg2)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(checker)

	var _textBufferAdapter *TextBufferAdapter // out

	_textBufferAdapter = wrapTextBufferAdapter(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _textBufferAdapter
}

// Buffer gets the underlying buffer for the adapter.
//
// The function returns the following values:
//
//   - buffer (optional): GtkSourceBuffer.
func (self *TextBufferAdapter) Buffer() *gtksource.Buffer {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _cret *C.GtkSourceBuffer           // in

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_text_buffer_adapter_get_buffer(_arg0)
	runtime.KeepAlive(self)

	var _buffer *gtksource.Buffer // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_buffer = &gtksource.Buffer{
				TextBuffer: gtk.TextBuffer{
					Object: obj,
				},
			}
		}
	}

	return _buffer
}

// Checker gets the checker used by the adapter.
//
// The function returns the following values:
//
//   - checker (optional): SpellingChecker or NULL.
func (self *TextBufferAdapter) Checker() *Checker {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _cret *C.SpellingChecker           // in

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_text_buffer_adapter_get_checker(_arg0)
	runtime.KeepAlive(self)

	var _checker *Checker // out

	if _cret != nil {
		_checker = wrapChecker(coreglib.Take(unsafe.Pointer(_cret)))
	}

	return _checker
}

// Enabled gets if the spellcheck is enabled.
//
// The function returns the following values:
//
//   - ok: TRUE if enabled.
func (self *TextBufferAdapter) Enabled() bool {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _cret C.gboolean                   // in

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_text_buffer_adapter_get_enabled(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Language gets the checker language.
//
// The function returns the following values:
//
//   - utf8 (optional): language code.
func (self *TextBufferAdapter) Language() string {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _cret *C.char                      // in

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_text_buffer_adapter_get_language(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// MenuModel gets the menu model containing corrections.
//
// The function returns the following values:
//
//   - menuModel: GMenuModel.
func (self *TextBufferAdapter) MenuModel() gio.MenuModeller {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _cret *C.GMenuModel                // in

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_text_buffer_adapter_get_menu_model(_arg0)
	runtime.KeepAlive(self)

	var _menuModel gio.MenuModeller // out

	{
		objptr := unsafe.Pointer(_cret)
		if objptr == nil {
			panic("object of type gio.MenuModeller is nil")
		}

		object := coreglib.Take(objptr)
		casted := object.WalkCast(func(obj coreglib.Objector) bool {
			_, ok := obj.(gio.MenuModeller)
			return ok
		})
		rv, ok := casted.(gio.MenuModeller)
		if !ok {
			panic("no marshaler for " + object.TypeFromInstance().String() + " matching gio.MenuModeller")
		}
		_menuModel = rv
	}

	return _menuModel
}

// Tag gets the tag used for potentially misspelled words.
//
// The function returns the following values:
//
//   - textTag (optional): GtkTextTag or NULL.
func (self *TextBufferAdapter) Tag() *gtk.TextTag {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _cret *C.GtkTextTag                // in

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_text_buffer_adapter_get_tag(_arg0)
	runtime.KeepAlive(self)

	var _textTag *gtk.TextTag // out

	if _cret != nil {
		{
			obj := coreglib.Take(unsafe.Pointer(_cret))
			_textTag = &gtk.TextTag{
				Object: obj,
			}
		}
	}

	return _textTag
}

// InvalidateAll: invalidate the spelling engine, to force parsing again.
//
// Invalidation is automatically done on gtksource.Buffer:loading change.
func (self *TextBufferAdapter) InvalidateAll() {
	var _arg0 *C.SpellingTextBufferAdapter // out

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.spelling_text_buffer_adapter_invalidate_all(_arg0)
	runtime.KeepAlive(self)
}

// SetChecker: set the spelling.Checker used for spellchecking.
//
// The function takes the following parameters:
//
//   - checker: SpellingChecker.
func (self *TextBufferAdapter) SetChecker(checker *Checker) {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _arg1 *C.SpellingChecker           // out

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.SpellingChecker)(unsafe.Pointer(coreglib.InternObject(checker).Native()))

	C.spelling_text_buffer_adapter_set_checker(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(checker)
}

// SetEnabled: if TRUE spellcheck is enabled.
//
// The function takes the following parameters:
//
//   - enabled: whether the spellcheck is enabled.
func (self *TextBufferAdapter) SetEnabled(enabled bool) {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _arg1 C.gboolean                   // out

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.spelling_text_buffer_adapter_set_enabled(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(enabled)
}

// SetLanguage sets the language code to use by the checker, such as en_US.
//
// The function takes the following parameters:
//
//   - language to use.
func (self *TextBufferAdapter) SetLanguage(language string) {
	var _arg0 *C.SpellingTextBufferAdapter // out
	var _arg1 *C.char                      // out

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(language)))
	defer C.free(unsafe.Pointer(_arg1))

	C.spelling_text_buffer_adapter_set_language(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(language)
}

// UpdateCorrections looks at the current cursor position and updates the list
// of corrections based on the current word.
//
// Use this to force an update immediately rather than after the automatic
// timeout caused by cursor movements.
func (self *TextBufferAdapter) UpdateCorrections() {
	var _arg0 *C.SpellingTextBufferAdapter // out

	_arg0 = (*C.SpellingTextBufferAdapter)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	C.spelling_text_buffer_adapter_update_corrections(_arg0)
	runtime.KeepAlive(self)
}

// TextBufferAdapterClass: instance of this type is always passed by reference.
type TextBufferAdapterClass struct {
	*textBufferAdapterClass
}

// textBufferAdapterClass is the struct that's finalized.
type textBufferAdapterClass struct {
	native *C.SpellingTextBufferAdapterClass
}
