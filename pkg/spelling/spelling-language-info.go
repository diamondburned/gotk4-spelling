// Code generated by girgen. DO NOT EDIT.

package spelling

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libspelling.h>
import "C"

// GType values.
var (
	GTypeLanguageInfo = coreglib.Type(C.spelling_language_info_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLanguageInfo, F: marshalLanguageInfo},
	})
}

// LanguageInfoOverrides contains methods that are overridable.
type LanguageInfoOverrides struct {
}

func defaultLanguageInfoOverrides(v *LanguageInfo) LanguageInfoOverrides {
	return LanguageInfoOverrides{}
}

type LanguageInfo struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*LanguageInfo)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*LanguageInfo, *LanguageInfoClass, LanguageInfoOverrides](
		GTypeLanguageInfo,
		initLanguageInfoClass,
		wrapLanguageInfo,
		defaultLanguageInfoOverrides,
	)
}

func initLanguageInfoClass(gclass unsafe.Pointer, overrides LanguageInfoOverrides, classInitFunc func(*LanguageInfoClass)) {
	if classInitFunc != nil {
		class := (*LanguageInfoClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapLanguageInfo(obj *coreglib.Object) *LanguageInfo {
	return &LanguageInfo{
		Object: obj,
	}
}

func marshalLanguageInfo(p uintptr) (interface{}, error) {
	return wrapLanguageInfo(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *LanguageInfo) Code() string {
	var _arg0 *C.SpellingLanguageInfo // out
	var _cret *C.char                 // in

	_arg0 = (*C.SpellingLanguageInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_language_info_get_code(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

func (self *LanguageInfo) Group() string {
	var _arg0 *C.SpellingLanguageInfo // out
	var _cret *C.char                 // in

	_arg0 = (*C.SpellingLanguageInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_language_info_get_group(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

func (self *LanguageInfo) Name() string {
	var _arg0 *C.SpellingLanguageInfo // out
	var _cret *C.char                 // in

	_arg0 = (*C.SpellingLanguageInfo)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_language_info_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// LanguageInfoClass: instance of this type is always passed by reference.
type LanguageInfoClass struct {
	*languageInfoClass
}

// languageInfoClass is the struct that's finalized.
type languageInfoClass struct {
	native *C.SpellingLanguageInfoClass
}
