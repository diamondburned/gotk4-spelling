// Code generated by girgen. DO NOT EDIT.

package spelling

import (
	"runtime"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <libspelling.h>
import "C"

// GType values.
var (
	GTypeLanguage = coreglib.Type(C.spelling_language_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeLanguage, F: marshalLanguage},
	})
}

type Language struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*Language)(nil)
)

// Languager describes types inherited from class Language.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type Languager interface {
	coreglib.Objector
	baseLanguage() *Language
}

var _ Languager = (*Language)(nil)

func wrapLanguage(obj *coreglib.Object) *Language {
	return &Language{
		Object: obj,
	}
}

func marshalLanguage(p uintptr) (interface{}, error) {
	return wrapLanguage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (self *Language) baseLanguage() *Language {
	return self
}

// BaseLanguage returns the underlying base object.
func BaseLanguage(obj Languager) *Language {
	return obj.baseLanguage()
}

// The function takes the following parameters:
//
func (self *Language) AddWord(word string) {
	var _arg0 *C.SpellingLanguage // out
	var _arg1 *C.char             // out

	_arg0 = (*C.SpellingLanguage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(word)))
	defer C.free(unsafe.Pointer(_arg1))

	C.spelling_language_add_word(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(word)
}

// The function takes the following parameters:
//
//   - word
//   - wordLen
//
// The function returns the following values:
//
func (self *Language) ContainsWord(word string, wordLen int) bool {
	var _arg0 *C.SpellingLanguage // out
	var _arg1 *C.char             // out
	var _arg2 C.gssize            // out
	var _cret C.gboolean          // in

	_arg0 = (*C.SpellingLanguage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(word)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(wordLen)

	_cret = C.spelling_language_contains_word(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(word)
	runtime.KeepAlive(wordLen)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
func (self *Language) Code() string {
	var _arg0 *C.SpellingLanguage // out
	var _cret *C.char             // in

	_arg0 = (*C.SpellingLanguage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_language_get_code(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function returns the following values:
//
func (self *Language) ExtraWordChars() string {
	var _arg0 *C.SpellingLanguage // out
	var _cret *C.char             // in

	_arg0 = (*C.SpellingLanguage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.spelling_language_get_extra_word_chars(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// The function takes the following parameters:
//
func (self *Language) IgnoreWord(word string) {
	var _arg0 *C.SpellingLanguage // out
	var _arg1 *C.char             // out

	_arg0 = (*C.SpellingLanguage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(word)))
	defer C.free(unsafe.Pointer(_arg1))

	C.spelling_language_ignore_word(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(word)
}

// ListCorrections retrieves a list of possible corrections for word.
//
// The function takes the following parameters:
//
//   - word to be checked.
//   - wordLen: length of word, or -1 if word is zero-terminated.
//
// The function returns the following values:
//
//   - utf8s (optional): A list of possible corrections, or NULL.
//
func (self *Language) ListCorrections(word string, wordLen int) []string {
	var _arg0 *C.SpellingLanguage // out
	var _arg1 *C.char             // out
	var _arg2 C.gssize            // out
	var _cret **C.char            // in

	_arg0 = (*C.SpellingLanguage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(word)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.gssize(wordLen)

	_cret = C.spelling_language_list_corrections(_arg0, _arg1, _arg2)
	runtime.KeepAlive(self)
	runtime.KeepAlive(word)
	runtime.KeepAlive(wordLen)

	var _utf8s []string // out

	if _cret != nil {
		defer C.free(unsafe.Pointer(_cret))
		{
			var i int
			var z *C.char
			for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
				i++
			}

			src := unsafe.Slice(_cret, i)
			_utf8s = make([]string, i)
			for i := range src {
				_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
				defer C.free(unsafe.Pointer(src[i]))
			}
		}
	}

	return _utf8s
}
